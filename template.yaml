AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: A serverless Patch Server for Jamf Pro using AWS.

Parameters:

  ApiTokenSecretKey:
    Type: String
    Description: The key used for generating and validating API tokens.

  DomainName:
    Type: String
    Description: The custom domain name for the API.

  EmailSenderAddress:
    Type: String
    Description: The "from" address for email notifications from this service.

  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
    Description: The ID of hosted zone for the Route53 record.

  CertificateId:
    Type: String
    Description: The UUID for the certificate to use for the custom domain.

  EncryptionKeyId:
    Type: String
    Description: ID of the KMS key to decrypt parameter store values.

  DatabaseKeyParameter:
    Type: String
    Description: The alias for the database key stored in parameter store.

Resources:

# DynamoDB Tables

  ContributorsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String

  BlackListedTokensTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: token_id
        Type: String

  TitlesTable:
    Type: AWS::DynamoDB::Table
    Properties:

      AttributeDefinitions:
      - AttributeName: contributor_id
        AttributeType: S
      - AttributeName: title_id
        AttributeType: S

      KeySchema:
      - AttributeName: contributor_id
        KeyType: HASH
      - AttributeName: title_id
        KeyType: RANGE

      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'

  GitHubReposTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: contributor_id
        Type: String

# SNS Topics

  SendEmailTopic:
    Type: AWS::SNS::Topic

# API Gateway

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: "2.0"
        info:
          title: !Ref AWS::StackName
        paths:
          "/api/v1/register":
            post:
              x-amazon-apigateway-integration:
                httpMethod: post
                type: aws_proxy
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiContributorRegistration.Arn}/invocations'
              responses: {}
          "/api/v1/verify":
            get:
              x-amazon-apigateway-integration:
                httpMethod: post
                type: aws_proxy
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ApiContributorVerification.Arn}/invocations'
              responses: {}

# CloudFront Distribution

#  CloudFrontOriginAccessIdentity:
#    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
#      Properties:
#        Comment: !Sub '${AWS::StackName}-origin-access-identity'

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: Unified domain for CommunityPatch.

        Aliases:
          - !Ref DomainName

        ViewerCertificate:
          AcmCertificateArn: !Sub 'arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/${CertificateId}'
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.1_2016

        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          DefaultTTL: 300
          ForwardedValues:
            Headers:
              - Accept
              - Referer
              - Authorization
              - Content-Type
            QueryString: true
          MaxTTL: 300
          TargetOriginId: ApiGatewayOrigin
          ViewerProtocolPolicy: https-only

        Origins:
          - DomainName: !Sub '${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com'
            Id: ApiGatewayOrigin
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
            OriginPath: /Prod

# Route 53 Record

  CloudFrontRoute53Record:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref DomainName
      Type: A
      HostedZoneId: !Ref HostedZoneId
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: Z2FDTNDATAQYW2

# Contributor Management

  ApiContributorRegistration:
    Type: AWS::Serverless::Function
    Description: Creates and rotates tokens.
    Properties:
      Runtime: python3.6
      Handler: api_contributor_registration.lambda_handler
      CodeUri: ./src/functions/contributors/api_contributor_registration
      Environment:
        Variables:
          CONTRIBUTORS_TABLE: !Ref ContributorsTable
          DB_KEY_PARAMETER: !Ref DatabaseKeyParameter
          DOMAIN_NAME: !Ref DomainName
          EMAIL_SNS_TOPIC: !Ref SendEmailTopic
      Policies:
        Statement:
          - Effect: Allow
            Action: dynamodb:PutItem
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ContributorsTable}'
          - Effect: Allow
            Action: sns:Publish
            Resource: !Ref SendEmailTopic
          - Effect: Allow
            Action: ssm:GetParameter*
            Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/communitypatch*'
          - Effect: Allow
            Action: kms:Decrypt
            Resource: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${EncryptionKeyId}'
      Events:
        ApiContributorRegistration:
          Type: Api
          Properties:
            Path: /api/v1/register
            Method: post
            RestApiId:
                Ref: ApiGateway

  ApiContributorVerification:
    Type: AWS::Serverless::Function
    Description: Generate an API token upon account verification.
    Properties:
      Runtime: python3.6
      Handler: api_contributor_verification.lambda_handler
      CodeUri: ./src/functions/contributors/api_contributor_verification
      Environment:
        Variables:
          CONTRIBUTORS_TABLE: !Ref ContributorsTable
          DB_KEY_PARAMETER: !Ref DatabaseKeyParameter
          DOMAIN_NAME: !Ref DomainName
          EMAIL_SNS_TOPIC: !Ref SendEmailTopic
          SECRET_KEY: !Ref ApiTokenSecretKey
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:UpdateItem
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ContributorsTable}'
          - Effect: Allow
            Action: sns:Publish
            Resource: !Ref SendEmailTopic
          - Effect: Allow
            Action: ssm:GetParameter*
            Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/communitypatch*'
          - Effect: Allow
            Action: kms:Decrypt
            Resource: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${EncryptionKeyId}'
      Events:
        ApiContributorRegistration:
          Type: Api
          Properties:
            Path: /api/v1/verify
            Method: get
            RestApiId:
                Ref: ApiGateway

# Email Service

  EmailService:
    Type: AWS::Serverless::Function
    Description:
    Properties:
      Runtime: python3.6
      Handler: email_service.lambda_handler
      CodeUri: ./src/functions/email_service
      Environment:
        Variables:
          SENDER_ADDRESS: !Ref EmailSenderAddress
      Policies:
        Statement:
          - Effect: Allow
            Action: ses:SendEmail
            Resource: '*'
            Condition:
              StringEquals:
                ses:FromAddress: !Ref EmailSenderAddress
      Events:
        SnsTopic:
          Type: SNS
          Properties:
            Topic: !Ref SendEmailTopic