AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A serverless Patch Server for Jamf Pro using AWS.

Resources:
  PatchServerFunc:
    Type: AWS::Serverless::Function
    Properties:
      Handler: patch_server.lambda_handler
      Runtime: python3.6
      CodeUri: ./src/PatchServerFunc
      Environment:
        Variables:
          S3_BUCKET: !Ref Bucket
      Policies:
        Statement:
          - Effect: Allow
            Action: s3:ListBucket
            Resource: !Sub 'arn:aws:s3:::${Bucket}'
          - Effect: Allow
            Action: s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${Bucket}/*'
      Events:
        Software:
          Type: Api
          Properties:
            Path: /jamf/v1/software
            Method: get
        SoftwareTitles:
          Type: Api
          Properties:
            Path: /jamf/v1/software/{proxy+}
            Method: get
        PatchTitle:
          Type: Api
          Properties:
            Path: /jamf/v1/patch/{proxy+}
            Method: get

  SubscriptionFunc:
    Type: AWS::Serverless::Function
    Properties:
      Handler: subscription.lambda_handler
      Runtime: python3.6
      CodeUri: ./src/SubscriptionFunc
      Timeout: 180
      Environment:
        Variables:
          S3_BUCKET: !Ref Bucket
          TABLE_NAME: !Ref DynamoDBTable
      Policies:
        Statement:
          - Effect: Allow
            Action:
             - dynamodb:DeleteItem
             - dynamodb:GetItem
             - dynamodb:PutItem
             - dynamodb:Scan
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}'
          - Effect: Allow
            Action:
             - s3:DeleteObject
             - s3:PutObject
            Resource: !Sub 'arn:aws:s3:::${Bucket}/*'
      Events:
        Subscribe:
          Type: Api
          Properties:
            Path: /subscription/subscribe
            Method: post
        UnSubscribe:
          Type: Api
          Properties:
            Path: /subscription/unsubscribe/{title}
            Method: post
        SyncTimer:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)

  RestApiFunc:
    Type: AWS::Serverless::Function
    Properties:
      Handler: rest_api.lambda_handler
      Runtime: python3.6
      CodeUri: ./src/RestApiFunc
      Timeout: 10
      Environment:
        Variables:
          S3_BUCKET: !Ref Bucket
          TABLE_NAME: !Ref DynamoDBTable
      Policies:
        Statement:
          - Effect: Allow
            Action:
             - dynamodb:GetItem
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}'
          - Effect: Allow
            Action:
             - s3:GetObject
             - s3:PutObject
            Resource: !Sub 'arn:aws:s3:::${Bucket}/*'
      Events:
        PostDefinition:
          Type: Api
          Properties:
            Path: /title
            Method: post
        PutDefinition:
          Type: Api
          Properties:
            Path: /title/{title}
            Method: put
        PostVersion:
          Type: Api
          Properties:
            Path: /title/{title}/version
            Method: post

  Bucket:
    Type: AWS::S3::Bucket

  DynamoDBTable:
    Type: AWS::Serverless::SimpleTable
