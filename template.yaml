AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: A serverless Patch Server for Jamf Pro using AWS.

Parameters:

  EmailSenderAddress:
    Type: String
    Description: The "from" address for email notifications from this service.

  TokenSecretKey:
    Type: String
    Description: The key used for generating and validating API tokens.

Resources:

# S3 Buckets

  PatchDefinitionsBucket:
    Type: AWS::S3::Bucket

# DynamoDB Tables

  PatchDefinitionsTable:
    Type: AWS::Serverless::SimpleTable

# API Gateway

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: "2.0"
        info:
          title: !Ref AWS::StackName
        paths:
          "/":
            get:
              x-amazon-apigateway-integration:
                contentHandling: "CONVERT_TO_TEXT"
                type: aws
                httpMethod: post
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebView.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Content-Type: "'text/html'"
                    responseTemplates:
                      text/html: "$input.path('$')"
              produces:
                - "text/html"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Content-Type:
                      type: "string"

          "/api/v1/title":
            post:
              x-amazon-apigateway-integration:
                httpMethod: post
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RestApiNew.Arn}/invocations
              responses: {}

# Web View Function: /

  WebView:
    Type: AWS::Serverless::Function
    Description: Renders the main web page displaying all available titles.
    Properties:
      Runtime: python3.6
      Handler: web_view.lambda_handler
      CodeUri: ./src/functions/web_view
      Events:
        get:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId:
                Ref: ApiGateway

# Jamf Pro API: /jamf/v1

  JamfApi:
    Type: AWS::Serverless::Function
    Description: Handles Jamf Pro requests for patch definitions.
    Properties:
      Runtime: python3.6
      Handler: jamf_api.lambda_handler
      CodeUri: ./src/functions/jamf_api
      Timeout: 15
      Environment:
        Variables:
          S3_BUCKET: !Ref PatchDefinitionsBucket
          DYNAMODB_TABLE: !Ref PatchDefinitionsTable
      Policies:
        Statement:
          - Effect: Allow
            Action:
             - dynamodb:GetItem
             - dynamodb:Scan
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${PatchDefinitionsTable}'
          - Effect: Allow
            Action: s3:ListBucket
            Resource: !Sub 'arn:aws:s3:::${PatchDefinitionsBucket}'
          - Effect: Allow
            Action: s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${PatchDefinitionsBucket}/*'
      Events:
        JamfApi:
          Type: Api
          Properties:
            Path: /jamf/v1/{proxy+}
            Method: get
            RestApiId:
                Ref: ApiGateway


# Rest API: /api/v1

  RestApiNew:
    Type: AWS::Serverless::Function
    Description: Handles API requests for creating software title definitions.
    Properties:
      Runtime: python3.6
      Handler: rest_api_new.lambda_handler
      CodeUri: ./src/functions/rest_api_new
      Timeout: 10
      Environment:
        Variables:
          DEFINITIONS_BUCKET: !Ref PatchDefinitionsBucket
          DEFINITIONS_TABLE: !Ref PatchDefinitionsTable
          SECRET_KEY: !Ref TokenSecretKey
          SENDER_ADDRESS: !Ref EmailSenderAddress
      Policies:
        Statement:
          - Effect: Allow
            Action:
             - s3:GetObject
             - s3:PutObject
            Resource: !Sub 'arn:aws:s3:::${PatchDefinitionsBucket}/*'
          - Effect: Allow
            Action:
             - dynamodb:GetItem
             - dynamodb:PutItem
             - dynamodb:Scan
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${PatchDefinitionsTable}'
          - Effect: Allow
            Action: ses:SendEmail
            Resource: '*'
            Condition:
              StringEquals:
                ses:FromAddress: 'noreply@communitypatch.com'
      Events:
        PostDefinition:
          Type: Api
          Properties:
            Path: /api/v1/title
            Method: post
            RestApiId:
                Ref: ApiGateway

#  PatchApiUpdateDelete:
#    Type: AWS::Serverless::Function
#    Description: Handles API requests for updating patch definitions.
#    Properties:
#      Runtime: python3.6
#      Handler: rest_api.lambda_handler
#      CodeUri: ./src/functions/api
#      Timeout: 10
#      Environment:
#        Variables:
#          S3_BUCKET: !Ref PatchDefinitionsBucket
#          TABLE_NAME: !Ref SubscriptionsTable
#      Policies:
#        Statement:
#          - Effect: Allow
#            Action: dynamodb:GetItem
#            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${SubscriptionsTable}'
#          - Effect: Allow
#            Action:
#             - s3:GetObject
#             - s3:PutObject
#            Resource: !Sub 'arn:aws:s3:::${PatchDefinitionsBucket}/*'
#      Events:
#        PostVersion:
#          Type: Api
#          Properties:
#            Path: /api/v1/title/{title_id}/version
#            Method: post
#            RestApiId:
#                Ref: ApiGateway
