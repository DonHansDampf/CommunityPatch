AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: A serverless Patch Server for Jamf Pro using AWS.

Parameters:

  ApiSecretKey:
    Type: String
    Description: The parameter name for the encrypted API Secret Key.

  KmsKeyId:
    Type: String
    Description: The KMS key for this deployment.

Resources:

# Patch Server Functions

  PatchServerFunc:
    Type: AWS::Serverless::Function
    Description: Handles Jamf Pro requests for patch definitions.
    Properties:
      Handler: patch_server.lambda_handler
      Runtime: python3.6
      CodeUri: ./src/PatchServerFunc
      Timeout: 15
      Environment:
        Variables:
          S3_BUCKET: !Ref PatchDefinitionsBucket
      Policies:
        Statement:
          - Effect: Allow
            Action: s3:ListBucket
            Resource: !Sub 'arn:aws:s3:::${PatchDefinitionsBucket}'
          - Effect: Allow
            Action: s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${PatchDefinitionsBucket}/*'
      Events:
        Software:
          Type: Api
          Properties:
            Path: /jamf/v1/software
            Method: get
        SoftwareTitles:
          Type: Api
          Properties:
            Path: /jamf/v1/software/{proxy+}
            Method: get
        PatchTitle:
          Type: Api
          Properties:
            Path: /jamf/v1/patch/{proxy+}
            Method: get

# Subscriptions Functions

  SubscriptionsFunc:
    Type: AWS::Serverless::Function
    Description: Handles subscribe/unsubscribe requests for patch definitions. REQUIRES AUTHENTICATION!
    Properties:
      Handler: subscriptions.lambda_handler
      Runtime: python3.6
      CodeUri: ./src/SubscriptionsFunc
      Timeout: 180
      Environment:
        Variables:
          S3_BUCKET: !Ref PatchDefinitionsBucket
          TABLE_NAME: !Ref SubscriptionsTable
      Policies:
        Statement:
          - Effect: Allow
            Action:
             - dynamodb:DeleteItem
             - dynamodb:GetItem
             - dynamodb:PutItem
             - dynamodb:Scan
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${SubscriptionsTable}'
          - Effect: Allow
            Action:
             - s3:DeleteObject
             - s3:PutObject
            Resource: !Sub 'arn:aws:s3:::${PatchDefinitionsBucket}/*'
      Events:
        Subscribe:
          Type: Api
          Properties:
            Path: /subscription/subscribe
            Method: post
        UnSubscribe:
          Type: Api
          Properties:
            Path: /subscription/unsubscribe/{title}
            Method: post
        SyncTimer:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)

  SubscriptionSyncFunc:
    Type: AWS::Serverless::Function
    Description: Reads from the Subscriptions table and executes a sync for each account's subscriptions.
    Properties:
      Handler: subscription_sync.lambda_handler
      Runtime: python3.6
      CodeUri: ./src/SubscriptionSyncFunc

  SubscriptionSyncTaskFunc:
    Type: AWS::Serverless::Function
    Description: Processes request for syncing subscriptions for an account.
    Properties:
      Handler: subscription_sync_task.lambda_handler
      Runtime: python3.6
      CodeUri: ./src/SubscriptionSyncTaskFunc

# Rest API Functions

  RestApiFunc:
    Type: AWS::Serverless::Function
    Description: Handles API requests for creating/updating/deleting patch definitions. REQUIRES AUTHENTICATION!
    Properties:
      Handler: rest_api.lambda_handler
      Runtime: python3.6
      CodeUri: ./src/RestApiFunc
      Timeout: 10
      Environment:
        Variables:
          S3_BUCKET: !Ref PatchDefinitionsBucket
          TABLE_NAME: !Ref SubscriptionsTable
      Policies:
        Statement:
          - Effect: Allow
            Action: dynamodb:GetItem
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${SubscriptionsTable}'
          - Effect: Allow
            Action:
             - s3:GetObject
             - s3:PutObject
            Resource: !Sub 'arn:aws:s3:::${PatchDefinitionsBucket}/*'
      Events:
        PostDefinition:
          Type: Api
          Properties:
            Path: /title
            Method: post
        PutDefinition:
          Type: Api
          Properties:
            Path: /title/{title}
            Method: put
        PostVersion:
          Type: Api
          Properties:
            Path: /title/{title}/version
            Method: post

# Account Management Functions

  AccountsFunc:
    Type: AWS::Serverless::Function
    Description: Handles new account requests, validating new accounts, and API token generation/invalidation.
    Properties:
      Handler: signup.lambda_handler
      Runtime: python3.6
      CodeUri: ./src/AccountsFunc
      Environment:
        Variables:
          TABLE_NAME: !Ref AccountsTable
          API_SECRET_KEY: !Ref ApiSecretKey
      Policies:
        Statement:
          - Effect: Allow
            Action: ssm:GetParameters
            Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ApiSecretKey}'
          - Effect: Allow
            Action: kms:Decrypt
            Resource: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}'
          - Effect: Allow
            Action:
             - dynamodb:DeleteItem
             - dynamodb:GetItem
             - dynamodb:PutItem
             - dynamodb:Scan
            Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AccountsTable}'
          - Effect: Allow
            Action: ses:SendEmail
            Resource: '*'
            Condition:
              StringEquals:
                ses:FromAddress: 'noreply@communitypatch.com'
      Events:
        NewAccount:
          Type: Api
          Properties:
            Path: /accounts
            Method: post
        ActivateAccount:
          Type: Api
          Properties:
            Path: /accounts/activate
            Method: get

# Email Functions

  EmailTaskFunc:
    Type: AWS::Serverless::Function
    Description: Reads from the Email Queue and sends messages.
    Properties:
      Handler: email_task.lambda_handler
      Runtime: python3.6
      CodeUri: ./src/EmailTaskFunc

# S3 Buckets

  PatchDefinitionsBucket:
    Type: AWS::S3::Bucket

# DynamoDB Tables

  AccountsTable:
    Type: AWS::Serverless::SimpleTable
    PrimaryKey:
      Name: id
      Type: String

  TokenBlacklistTable:
    Type: AWS::Serverless::SimpleTable

  SubscriptionsTable:
    Type: AWS::Serverless::SimpleTable

# SQS Queues

  ErrorQueue:
    Type: AWS::SQS::Queue
    Description: Dead Letter Queue for registering failures within the application.

  EmailQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 60
      RedrivePolicy:
        deadLetterTargetArn: !Sub ${ErrorQueue.Arn}
        maxReceiveCount: 10
